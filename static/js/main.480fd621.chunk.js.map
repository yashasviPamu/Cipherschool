{"version":3,"sources":["components/Loading.js","components/Display.js","components/Navbar.js","components/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Display","taskDetails","deleteTask","taskList","length","map","element","title","time","description","id","key","onClick","Navbar","props","heading","AddTask","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","addTask","onSubmit","this","htmlFor","type","placeholder","onChange","Component","App","task","console","log","Math","ceil","random","newTask","filter","editTask","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUAWeA,G,MARC,WACZ,OACI,yBAAKC,UAAU,WACX,yECoBGC,EAtBC,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,WAErBC,EAAWF,EAAYG,OAASH,EAAYI,KAAK,SAACC,GAAa,IAEzDC,EAAiCD,EAAjCC,MAAOC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,YAAaC,EAAOJ,EAAPI,GAClC,OACI,yBAAKX,UAAU,YAAYY,IAAKD,GAC5B,4CAAkBH,EAAlB,KACA,oCAAUC,GACV,0CAAe,2BAAIC,IACnB,4BAAQV,UAAU,SAASa,QAAS,WAAOV,EAAWQ,KAAtD,cAGL,kBAAC,EAAD,MAEP,OACK,yBAAKX,UAAU,gBACXI,ICXEU,G,MAPA,SAACC,GACZ,OACI,yBAAKf,UAAU,OACX,4BAAMe,EAAMC,Y,OCwCTC,G,kNA1CXC,MAAQ,CACJV,MAAO,GACPC,KAAM,GACNC,YAAa,I,EAIjBS,aAAe,SAACC,GAEZ,EAAKC,SAAL,eACKD,EAAME,OAAOX,GAAKS,EAAME,OAAOC,S,EAIxCC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKV,MAAMW,QAAQ,EAAKR,OACxB,EAAKG,SAAS,CACVb,MAAO,GACPC,KAAM,GACNC,YAAa,M,uDAKjB,OACI,0BAAMV,UAAU,WAAW2B,SAAUC,KAAKJ,cACtC,2BAAOK,QAAQ,SAAf,aACA,2BAAOC,KAAK,OAAOnB,GAAG,QAAQoB,YAAY,mBAAmBC,SAAUJ,KAAKT,aAAcI,MAAOK,KAAKV,MAAMV,QAFhH,IAEgI,6BAE5H,2BAAOqB,QAAQ,QAAf,WACA,2BAAOC,KAAK,OAAOnB,GAAG,OAAOoB,YAAY,mBAAmBC,SAAUJ,KAAKT,aAAcI,MAAOK,KAAKV,MAAMT,OAL/G,IAK8H,6BAE1H,2BAAOoB,QAAQ,eAAf,eACA,2BAAOC,KAAK,OAAOnB,GAAG,cAAcoB,YAAY,0BAA0BC,SAAUJ,KAAKT,aAAcI,MAAOK,KAAKV,MAAMR,cAR7H,IAQmJ,6BAE/I,2BAAOoB,KAAK,SAASP,MAAM,kB,GArCrBU,cC2CPC,G,kNAvCbhB,MAAQ,CACNF,QAAS,eACTd,YAAc,I,EAGdwB,QAAU,SAACS,GACVC,QAAQC,IAAI,gBAAiBF,GAC7BA,EAAKxB,GAAK2B,KAAKC,KAAqB,IAAhBD,KAAKE,UACzB,IAAItC,EAAW,sBAAO,EAAKgB,MAAMhB,aAAlB,CAA+BiC,IAC9CC,QAAQC,IAAI,yBAA0BnC,GACtC,EAAKmB,SAAS,CACXnB,iB,EAILC,WAAa,SAACQ,GACX,IAAI8B,EAAU,EAAKvB,MAAMhB,YAAYwC,QAAQ,SAAAP,GAC3C,OAAOA,EAAKxB,KAAOA,KAGrB,EAAKU,SAAS,CACZnB,YAAauC,K,uDAQjB,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,CAAQgB,QAASY,KAAKV,MAAMF,UAC5B,kBAAC,EAAD,CAASd,YAAa0B,KAAKV,MAAMhB,YAAaC,WAAYyB,KAAKzB,WAAYwC,SAAUf,KAAKe,WAC1F,kBAAC,EAAD,CAASjB,QAAUE,KAAKF,e,GAlCdkB,IAAMX,YCMJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.480fd621.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Loading = () => {\n    return(\n        <div className='loading'>\n            <p>Your data is being loaded. Please wait.</p>\n        </div>\n    )\n}\n\nexport default Loading;","import React from 'react';\nimport './display.css';\nimport Loading from './Loading';\n\nconst Display = ({taskDetails, deleteTask}) => {\n\n    const taskList = taskDetails.length ? taskDetails.map( (element) => {\n\n        const { title, time, description, id } = element;\n        return (\n            <div className='task-card' key={id}> \n                <h3>Course Name: {title} </h3>\n                <p>Time: {time}</p>\n                <p>Description:<i>{description}</i></p>\n                <button className='delete' onClick={() => {deleteTask(id)}}>Delete</button> \n           </div>        \n        )\n    }) : ( <Loading />)\n\n    return(\n         <div className='task-display'>\n            {taskList} \n        </div>     \n    );\n}\n\nexport default Display;","import React from 'react';\nimport './navbar.css';\n\nconst Navbar = (props) => {\n    return(\n        <div className='nav'>\n            <h2 >{props.heading}</h2>\n        </div>\n)}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './addtask.css';\n\nclass AddTask extends Component{\n    state = {\n        title: '',\n        time: '',\n        description: ''\n    }\n\n    // object['property']\n    handleChange = (event) => {\n        // console.log([event.target.id]);\n        this.setState({\n            [event.target.id]: event.target.value,\n        })\n    }\n\n    handleSubmit = (event) => {        \n        event.preventDefault();\n        this.props.addTask(this.state);   \n        this.setState({\n            title: '',\n            time: '',\n            description: ''\n        })    \n    }\n    \n    render(){\n        return(\n            <form className='add-form' onSubmit={this.handleSubmit}>\n                <label htmlFor='title'>Task Name</label>\n                <input type='text' id='title' placeholder='enter task .....' onChange={this.handleChange} value={this.state.title}></input> <br></br>\n\n                <label htmlFor='time'>Timings</label>\n                <input type='time' id='time' placeholder='select time.....' onChange={this.handleChange} value={this.state.time}></input> <br></br>\n\n                <label htmlFor='description'>Description</label>\n                <input type='text' id='description' placeholder='enter description .....' onChange={this.handleChange} value={this.state.description}></input> <br></br>\n\n                <input type='submit' value='Add Task'></input>\n            </form>           \n        )\n    }\n}\n\nexport default AddTask;","import React from 'react';\nimport Display from './components/Display';\nimport Navbar from './components/Navbar';\nimport AddTask from './components/AddTask';\nimport './App.css';\n\nclass App extends React.Component {\n  state = { \n    heading: 'TODO Planner',\n    taskDetails:  []\n   }\n\n    addTask = (task) => {\n     console.log('Inside App.js', task);\n     task.id = Math.ceil(Math.random() * 100);  \n     let taskDetails = [...this.state.taskDetails, task];\n     console.log('New Task Details Array', taskDetails);\n     this.setState({\n        taskDetails\n     })\n   }\n\n   deleteTask = (id) => {\n      let newTask = this.state.taskDetails.filter( task => {\n        return task.id !== id;\n      })\n\n      this.setState({\n        taskDetails: newTask\n      })\n   }\n   \n   \n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar heading={this.state.heading}></Navbar>\n        <Display taskDetails={this.state.taskDetails} deleteTask={this.deleteTask} editTask={this.editTask}></Display>\n        <AddTask addTask ={this.addTask}></AddTask>\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}